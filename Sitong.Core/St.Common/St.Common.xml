<?xml version="1.0"?>
<doc>
    <assembly>
        <name>St.Common</name>
    </assembly>
    <members>
        <member name="T:St.Common.Attributes.StCaCheAttribute">
            <summary>
            该方法使用缓存
            </summary>
        </member>
        <member name="P:St.Common.Attributes.StCaCheAttribute.ExpirationTime">
            <summary>
            过期时间(分钟)
            </summary>
        </member>
        <member name="T:St.Common.GuidMethods.GuidAll">
            <summary>
            All of the Guid methods
            </summary>
        </member>
        <member name="M:St.Common.GuidMethods.GuidAll.NewGuid">
            <summary>
            根据SqlServer规则生成UUID
            </summary>
            <returns></returns>
        </member>
        <member name="F:St.Common.Helper.AllStaticHelper.HRedisRoleAPI">
            <summary>
            存储角色接口权限信息的Hash名
            </summary>
        </member>
        <member name="F:St.Common.Helper.AllStaticHelper.HRedisAPI">
            <summary>
            存储接口信息的Hash名
            </summary>
        </member>
        <member name="F:St.Common.Helper.AllStaticHelper.HRedisMenu">
            <summary>
            存储菜单信息的Hash名
            </summary>
        </member>
        <member name="F:St.Common.Helper.AllStaticHelper.HRedisRole">
            <summary>
            存储角色信息的Hash名
            </summary>
        </member>
        <member name="F:St.Common.Helper.AllStaticHelper.HRedisRoleMenu">
            <summary>
            存储角色菜单权限信息的Hash名
            </summary>
        </member>
        <member name="M:St.Common.Helper.AppSettings.GetVal(System.String[])">
            <summary>
            获取配置文件值
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="T:St.Common.Helper.AssemblyHelper">
            <summary>
            程序集封装
            </summary>
        </member>
        <member name="M:St.Common.Helper.AssemblyHelper.GetAssemblys">
            <summary>
            获取项目所有的程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:St.Common.Helper.JwtHelper.GetJwtToken(St.Common.Helper.IdentityModel)">
            <summary>
            获取JwtToken
            </summary>
            <param name="identity">管理员信息</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.Helper.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="token">ToKen</param>
            <returns></returns>
        </member>
        <member name="T:St.Common.Helper.IdentityModel">
            <summary>
            Jwt管理员信息
            </summary>
        </member>
        <member name="P:St.Common.Helper.IdentityModel.UId">
            <summary>
            管理员Id
            </summary>
        </member>
        <member name="P:St.Common.Helper.IdentityModel.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="T:St.Common.Helper.LogInfoHelper">
            <summary>
            文件读写
            </summary>
        </member>
        <member name="F:St.Common.Helper.LogInfoHelper._LockSlim">
            <summary>
            读写锁
            </summary>
        </member>
        <member name="F:St.Common.Helper.LogInfoHelper._RootPath">
            <summary>
            程序文件地址
            </summary>
        </member>
        <member name="M:St.Common.Helper.LogInfoHelper.WriteLog(System.String,System.String[])">
            <summary>
            年-月-日Log记录
            </summary>
            <param name="fileName"></param>
            <param name="data"></param>
        </member>
        <member name="M:St.Common.Helper.MD5Helper.MD5Created16(System.String)">
            <summary>
            16位MD5加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:St.Common.Helper.MD5Helper.MD5Encrypt32(System.String)">
            <summary>
            32位MD5加密
            </summary>
            <param name="str">需要转换的字符</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.Helper.MD5Helper.MD5Encrypt64(System.String)">
            <summary>
            64位MD5加密
            </summary>
            <param name="str">需要转换的字符</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.Helper.SerializeHelper.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:St.Common.Helper.SerializeHelper.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:St.Common.MemoryCaChe.IMemoryCaChe.GetVal(System.Object)">
            <summary>
            根据Key找到缓存值
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.MemoryCaChe.IMemoryCaChe.GetVal``1(System.Object)">
            <summary>
            根据Key找到缓存值
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.MemoryCaChe.IMemoryCaChe.SetVal(System.Object,System.Object,System.TimeSpan)">
            <summary>
            存取数据至内存缓存中
            </summary>
            <param name="key">键名</param>
            <param name="value">值</param>
            <param name="expirationTime">过期时间</param>
        </member>
        <member name="M:St.Common.MemoryCaChe.IMemoryCaChe.Remove(System.Object)">
            <summary>
            根据Key删除对应缓存值
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="M:St.Common.MemoryCaChe.MemoryCaChe.GetVal``1(System.Object)">
            <summary>
            根据Key获取泛型值
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.MemoryCaChe.MemoryCaChe.GetVal(System.Object)">
            <summary>
            根据Key找到缓存值
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.MemoryCaChe.MemoryCaChe.SetVal(System.Object,System.Object,System.TimeSpan)">
            <summary>
            存取数据至内存缓存中
            </summary>
            <param name="key">键名</param>
            <param name="value">值</param>
            <param name="expirationTime">过期时间</param>
        </member>
        <member name="M:St.Common.MemoryCaChe.MemoryCaChe.Remove(System.Object)">
            <summary>
            根据Key删除对应缓存值
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.BeginLock(System.String,System.Int32)">
            <summary>
            开启Redis分布式锁
            </summary>
            <param name="key">锁名</param>
            <param name="expirationTimeSeconds">自动释放时间，默认5分钟</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.UnLock(System.String)">
            <summary>
            解除Redis分布式锁
            </summary>
            <param name="key">锁名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.Clear">
            <summary>
            清空所有值
            </summary>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.GetAsync(System.String)">
            <summary>
            获取<see cref="T:System.String"/>类型的值,不存在则为Null
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.GetAsync``1(System.String)">
            <summary>
            获取<typeparamref name="TEntity"/>类型的值,不存在返回default
            </summary>
            <typeparam name="TEntity">类型</typeparam>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.GetLikeAsync(System.String)">
            <summary>
            模糊查询符合条件的键值对,不存在则为Null
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            存储键值
            </summary>
            <param name="key">键名</param>
            <param name="val">值</param>
            <param name="timeSpan">缓存时间</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.IsExistAsync(System.String)">
            <summary>
            检测指定键值是否存在
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.DelAsync(System.String)">
            <summary>
            删除指定键值
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.HGetAsync(System.String,System.String)">
            <summary>
            获取Hash表<see cref="T:System.String"/>类型的值,不存在为Null
            </summary>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.HGetAsync``1(System.String,System.String)">
            <summary>
            获取Hash表<typeparamref name="TEntity"/>类型的值,不存在为Null
            </summary>
            <typeparam name="TEntity">类型</typeparam>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.HGetAsync``1(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取Hash表<typeparamref name="TEntity"/>类型的值,不存在为Null
            </summary>
            <typeparam name="TEntity">类型</typeparam>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.HGetAsync(System.String)">
            <summary>
            获取Hash表所有键值
            </summary>
            <param name="hashName">Hash名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.HGetAsync``1(System.String)">
            <summary>
            获取Hash表所有键值
            </summary>
            <param name="hashName">Hash名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.HDelAsync(System.String,System.String)">
            <summary>
            删除Hash表指定键值
            </summary>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.HIsExistAsync(System.String,System.String)">
            <summary>
            检测指定Hash表键值是否存在
            </summary>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.HIsExistAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            检测指定Hash表键值是否存在
            </summary>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.IRedisCaChe.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            存储Hash表键值
            </summary>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <param name="val">值</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.Clear">
            <summary>
            清空所有键值
            </summary>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.BeginLock(System.String,System.Int32)">
            <summary>
            开启Redis分布式锁
            </summary>
            <param name="key">锁名</param>
            <param name="expirationTimeSeconds">自动释放时间，默认5分钟</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.UnLock(System.String)">
            <summary>
            解除Redis分布式锁
            </summary>
            <param name="key">锁名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.IsExistAsync(System.String)">
            <summary>
            检测指定键值是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.DelAsync(System.String)">
            <summary>
            删除指定键值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            存储键值
            </summary>
            <param name="key">键</param>
            <param name="val">值</param>
            <param name="timeSpan">缓存时间</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.GetAsync(System.String)">
            <summary>
            获取<see cref="T:System.String"/>类型的值,不存在则为Null
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.GetAsync``1(System.String)">
            <summary>
            获取<typeparamref name="TEntity"/>类型的值,不存在返回default
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.GetLikeAsync(System.String)">
            <summary>
            模糊查询符合条件的键值对,不存在则为Null
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.HGetAsync(System.String,System.String)">
            <summary>
            获取Hash表<see cref="T:System.String"/>类型的值,不存在为Null
            </summary>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.HGetAsync``1(System.String,System.String)">
            <summary>
            获取Hash表<typeparamref name="TEntity"/>类型的值,不存在为Null
            </summary>
            <typeparam name="TEntity">类型</typeparam>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.HGetAsync``1(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取Hash表<typeparamref name="TEntity"/>类型的值,不存在为Null
            </summary>
            <typeparam name="TEntity">类型</typeparam>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.HGetAsync(System.String)">
            <summary>
            获取Hash表所有键值
            </summary>
            <param name="hashName">Hash名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.HGetAsync``1(System.String)">
            <summary>
            获取Hash表所有键值
            </summary>
            <param name="hashName">Hash名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.HDelAsync(System.String,System.String)">
            <summary>
            删除Hash表指定键值
            </summary>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.HIsExistAsync(System.String,System.String)">
            <summary>
            检测指定Hash表键值是否存在
            </summary>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.HIsExistAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            检测指定Hash表键值是否存在
            </summary>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <returns></returns>
        </member>
        <member name="M:St.Common.RedisCaChe.RedisCaChe.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            存储Hash表键值
            </summary>
            <param name="hashName">Hash名</param>
            <param name="field">Hash内键名</param>
            <param name="val">值</param>
            <returns></returns>
        </member>
    </members>
</doc>
